{"version":3,"sources":["reducers/tasks.js","components/App.js","actions/tasks.js","containers/App.js","components/PictureDetail.js","containers/PictureDetail.js","serviceWorker.js","index.js"],"names":["initialState","pictures","pictureSRC","textInput","pageIndex","placeholderText","flickrGalleryReducer","state","arguments","length","undefined","action","type","Object","objectSpread","payload","pictureTag","concat","newSRC","assign","text","indexNum","phText","App","_ref","inputText","initializePicture","addPicture","initializePictureSRC","addPictureSRC","reloadImages","changeIndex","changePlaceholder","addImages","react_default","a","createElement","className","placeholder","onChange","e","target","value","onClick","makePicArray","j","photos","photo","map","pic","srcPath","farm","server","id","secret","picID","picURL","divID","key","react_router_dom","to","alt","src","makePicSRCs","srcObj","addObj","forEach","picInfo","title","changePageIndex","dispatch","connect","getState","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","fetch","then","response","json","picArray","stop","_x","_x2","apply","this","_ref2","_callee2","_context2","addPicArray","_x3","_x4","PictureDetail","props","picSRC","picTitle","divHash","match","params","lib","smooth","Boolean","window","location","hostname","middlewares","thunk","store","applyMiddleware","createStore","createStoreWithMiddleware","__REDUX_DEVTOOLS_EXTENSION__","render","es","react_router","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.51c99847.chunk.js","sourcesContent":["// InitialState ----------------------------------------------------------------------------------------\nconst initialState = {\n  pictures: [],\n  pictureSRC: {},\n  textInput: 'shibuya',\n  pageIndex: 1,\n  placeholderText: 'shibuya',\n}\n\n// Reducer ----------------------------------------------------------------------------------------\nconst flickrGalleryReducer = (state=initialState, action) => {\n  switch (action.type) {\n    case 'INITIALIZE_PICTURE':\n      return {\n        ...state,\n        pictures: action.payload.pictureTag\n      };\n\n    case 'ADD_PICTURE':\n      return {\n        ...state,\n        pictures: state.pictures.concat([action.payload.pictureTag])\n      };\n\n    case 'INITIALIZE_PICTURESRC':\n      return {\n        ...state,\n        pictureSRC: action.payload.pictureSRC\n      };\n\n    case 'ADD_PICTURESRC':\n      const newSRC = Object.assign(state.pictureSRC, action.payload.pictureSRC);\n      return {\n        ...state,\n        pictureSRC: newSRC\n      };\n\n    case 'INPUT_TEXT':\n      return {\n        ...state,\n        textInput: action.payload.text\n      };\n\n    case 'CHANGE_INDEX':\n      return {\n        ...state,\n        pageIndex: action.payload.indexNum\n      };\n\n    case 'CHANGE_PLACEHOLDER':\n      return {\n        ...state,\n        placeholderText: action.payload.phText\n      };\n\n    default:\n      return state;\n  }\n}\nexport default flickrGalleryReducer;","import React from 'react';\n\n// Conpornent ----------------------------------------------------------------------------------------\nconst App = ({\n  pictures, textInput, pageIndex, placeholderText, \n  initializePicture, addPicture, initializePictureSRC, addPictureSRC, inputText, changeIndex, changePlaceholder, reloadImages, addImages\n}) => {\n\n  //検索キーワードを変更\n  const HandleChange = (e) => {\n    if(e.target.value === \"\"){\n    }else{\n      inputText(e.target.value);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1 className=\"App-title\">Flickr Gallery</h1>\n      </header>\n\n      <p className=\"searchBox\">\n        <input className=\"textInput\" \n          placeholder= {placeholderText}\n          onChange = {HandleChange}\n        ></input>\n\n        <button\n          onClick = {() => reloadImages(textInput)}\n        >検索</button>\n      </p>\n\n      <section className=\"picArea\">\n        {pictures}\n      </section>\n\n      {(\n        () => {\n          if (pictures.length > 0) {\n            return (\n              <p className=\"moreButton\">\n                <button\n                  onClick = {() => addImages(textInput, pageIndex)}\n                >画像をさらに読み込む</button>\n              </p>\n            );\n          } else {\n            return (\n              <p>検索したいキーワードを入力して、［検索］ボタンを押してください。</p>\n            );\n          }\n        }\n      )()}\n    </div>\n  );\n}\nexport default App;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst flickrapikey = \"80fc790f054fc08c6370aba43284e925\";\n// const flickrapikey = \"Your Flickr API KEY\";\n\n// ActionCreator ----------------------------------------------------------------------------------------\n\n// sync\nexport const initializePicture = (pictureTag) => {\n  // console.log(pictureTag);\n\n  return {\n    type: 'INITIALIZE_PICTURE',\n    payload: {\n      pictureTag\n    }\n  };\n};\n\nexport const addPicture = (pictureTag) => ({\n  type: 'ADD_PICTURE',\n  payload: {\n    pictureTag\n  }\n});\n\nexport const initializePictureSRC = (pictureSRC) => ({\n  type: 'INITIALIZE_PICTURESRC',\n  payload: {\n    pictureSRC\n  }\n});\n\nexport const addPictureSRC = (pictureSRC) => ({\n  type: 'ADD_PICTURESRC',\n  payload: {\n    pictureSRC\n  }\n});\n\nexport const inputText = (text) => ({\n  type: 'INPUT_TEXT',\n  payload: {\n    text\n  }\n});\n\nexport const changeIndex = (indexNum) => ({\n  type: 'CHANGE_INDEX',\n  payload: {\n    indexNum\n  }\n});\n\nexport const changePlaceholder = (phText) => ({\n  type: 'CHANGE_PLACEHOLDER',\n  payload: {\n    phText\n  }\n});\n\n// async\nexport const reloadImages = (textInput) => {\n  return async(dispatch, getState) => {\n    await dispatch(changeIndex(2));\n\n    fetch('https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=' + flickrapikey + '&tags=' + textInput + '&per_page=10&page=1&format=json&nojsoncallback=1')\n    .then(response => {\n      return response.json();\n    })\n    .then(j => {\n\n      // 画像追加\n      const picArray = makePicArray(j);\n      dispatch(initializePicture(picArray));\n\n      // 画像情報追加\n      const srcObj = makePicSRCs(j);\n      dispatch(initializePictureSRC(srcObj));\n\n      // プレースホルダー変更\n      const phText = \"現在の検索ワード：\" + textInput;\n      dispatch(changePlaceholder(phText));\n\n    })\n  };\n}\n\nexport const addImages = (textInput, pageIndex) => {\n  return async(dispatch, getState) => {\n    await changePageIndex(pageIndex, dispatch);\n\n    fetch('https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=' + flickrapikey + '&tags=' + textInput + '&per_page=10&page=' + pageIndex + '&format=json&nojsoncallback=1')\n    .then(response => {\n      return response.json();\n    })\n    .then(j => {\n\n      // 画像追加\n      const addPicArray = makePicArray(j);\n      dispatch(addPicture(addPicArray));\n\n      // 画像情報追加\n      const srcObj = makePicSRCs(j);\n      dispatch(addPictureSRC(srcObj));\n    })\n  };\n}\n\nconst makePicArray = (j) => {\n  return (\n    j.photos.photo.map((pic) => {\n      const srcPath = 'https://farm'+pic.farm+'.staticflickr.com/'+pic.server+'/'+pic.id+'_'+pic.secret+'_n.jpg';\n      const picID = pic.id;\n      const picURL = \"/picture/\" + pic.id;\n      const divID = \"id-\" + pic.id;\n\n      return(\n        <div id={divID} key={picID}>\n          <Link to={picURL}>\n            <img alt=\"\" src={srcPath} ></img>\n          </Link>\n        </div>\n      )\n    })\n  )\n}\n\nconst makePicSRCs = (j) => {\n  let srcObj = {};\n  let addObj = {};\n  j.photos.photo.forEach((pic) => {\n    const srcPath = 'https://farm'+pic.farm+'.staticflickr.com/'+pic.server+'/'+pic.id+'_'+pic.secret+'.jpg';\n    const picID = pic.id;\n    const picTitle = pic.title;\n\n    const picInfo = {'src':srcPath, 'title':picTitle};\n    addObj[picID] = picInfo;\n    Object.assign(srcObj, addObj);\n  });\n\n  return srcObj;\n}\n\nconst changePageIndex = (pageIndex, dispatch) => {\n  pageIndex++;\n  dispatch(changeIndex(pageIndex));\n}","import { connect } from 'react-redux';\nimport App from '../components/App';\nimport { initializePicture, addPicture, initializePictureSRC, addPictureSRC, inputText, changeIndex, changePlaceholder, reloadImages, addImages } from '../actions/tasks';\n\n\nconst mapStateToProps = ({ pictures, textInput, pageIndex, placeholderText }) => {\n\treturn {\n\t\tpictures, textInput, pageIndex, placeholderText,\n\t};\n}\n\nconst mapDispatchToPtops  = (dispatch, getState) => {\n\treturn {\n\t\tinitializePicture(pictureTag) {\n\t\t\tdispatch(initializePicture(pictureTag));\n\t\t},\n\t\taddPicture(pictureTag) {\n\t\t\tdispatch(addPicture(pictureTag));\n\t\t},\n\t\tinitializePictureSRC(pictureSRC) {\n\t\t\tdispatch(initializePictureSRC(pictureSRC));\n\t\t},\n\t\taddPictureSRC(pictureSRC) {\n\t\t\tdispatch(addPictureSRC(pictureSRC));\n\t\t},\n\t\tinputText(text) {\n\t\t\tdispatch(inputText(text));\n\t\t},\n\t\tchangeIndex(indexNum) {\n\t\t\tdispatch(changeIndex(indexNum));\n\t\t},\n\t\tchangePlaceholder(phText) {\n\t\t\tdispatch(changePlaceholder(phText));\n\t\t},\n\t\treloadImages(textInput) {\n\t\t\tdispatch(reloadImages(textInput));\n\t\t},\n\t\taddImages(textInput, pageIndex) {\n\t\t\tdispatch(addImages(textInput, pageIndex));\n\t\t}\n\t};\n}\n\nexport default connect(mapStateToProps, mapDispatchToPtops)(App);","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport {HashLink} from 'react-router-hash-link';\n\n// Conpornent ----------------------------------------------------------------------------------------\nconst PictureDetail = (props) => {\n\n  const picID = props.match.params.id;\n  const picInfo = props.pictureSRC[picID];\n  let picSRC;\n  let picTitle;\n  let divHash;\n\n  if(picInfo){\n    picSRC = picInfo['src'];\n    picTitle = picInfo['title'];\n    divHash = \"/#id-\" + picID;\n  }\n\n  return (\n    <div className=\"App PictureDetail\">\n      <header>\n        <h1 className=\"App-title\">Flickr Gallery</h1>\n      </header>\n\n      <div>\n        {(\n          () => {\n            if (picInfo) {\n              return (\n                <div>\n                  <img src={picSRC} alt={picTitle}/>\n                  <p>{picTitle}</p>\n                </div>\n              );\n            } else {\n              return (\n                <p>画像が取得できていません。</p>\n              );\n            }\n          }\n        )()}\n      </div>\n\n      <p className=\"moreButton\">\n        {(\n          () => {\n            if (picInfo) {\n              return (\n                // <Link to={divHash} ><button>戻る</button></Link>\n                <HashLink smooth to={divHash} ><button>戻る</button></HashLink>\n              );\n            } else {\n              return (\n                <Link to=\"/\" ><button>戻る</button></Link>\n              );\n            }\n          }\n        )()}\n      </p>\n    </div>\n  );\n}\nexport default PictureDetail;","import { connect } from 'react-redux';\nimport PictureDetail from '../components/PictureDetail';\n\n\nconst mapStateToProps = ({pictureSRC}) => {\n\treturn {\n\t\tpictureSRC\n\t};\n}\n\nexport default connect(mapStateToProps)(PictureDetail);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport {render} from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { HashRouter as Router, Route } from 'react-router-dom';\n\nimport flickrGalleryReducer from './reducers/tasks'\nimport thunk from 'redux-thunk';\n// import logger from 'redux-logger';\n// import { ReloadImages, AddImages, HandleChange, ChangePageIndex, App } from './containers/App'\nimport App from './containers/App'\nimport PictureDetail from './containers/PictureDetail'\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\n// middleware ----------------------------------------------------------------------------------------\nconst middlewares = [thunk];\nconst createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore);\n// const middlewares = [thunk];\n\n// Store ----------------------------------------------------------------------------------------\nconst store = createStoreWithMiddleware(\n  flickrGalleryReducer\n  ,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\n// const store = createStore(\n//   flickrGalleryReducer,\n//   applyMiddleware(...middlewares)\n//   // ,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n// );\n\n// Rendering ----------------------------------------------------------------------------------------\nrender(\n  <Provider store={store}>\n    <Router>\n      <Route exact path=\"/\" component={App} />\n      <Route \n        path=\"/picture/:id\"\n        component={PictureDetail}\n      />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}